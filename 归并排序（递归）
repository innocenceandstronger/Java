import java.util.Arrays;
public class Test0928 {
    public static void mergeSort(int[] array){
        mergeSortInternal(array,0,array.length);
    }
    private static void mergeSortInternal(int[] array,int low,int high){
        if(low>=high-1){        //考虑是否溢出
            return;
        }
        int mid=(low+high)/2;
        mergeSortInternal(array,low,mid);
        mergeSortInternal(array,mid,high);

        merge(array,low,mid,high);
    }
    private static void merge(int[] array,int low,int mid,int high){
        int i=low;
        int j=mid;
        int length=high-low;
        int[] extra=new int[length];     //定义一个新数组
        int k=0;                         //新建数组的下标
        while(i<mid&&j<high){              //此时，将数组从mid处分为两个区间，下标分别为i,j
            if(array[i]<=array[j]) {       //如果前者的元素小于后者，则将前者的元素搬到新数组
                extra[k++] = array[i++];    //后置++，先引用再自增
            }else{                          //后者元素大于前者
                extra[k++]=array[j++];
            }
        }
        while(i<mid){                    //这是后面的数组已为空的情况下，直接将前面的数组剩下的元素全部搬到新数组
            extra[k++]=array[i++];
        }
        while(j<high){                    //这是前面的数组已为空的情况
            extra[k++]=array[j++];
        }
        for(int t=0;t<length;t++){         //再将新数组的元素搬到原来的数组
            array[low+t]=extra[t];
        }
    }
    public static void main(String[] args){
        int[] array={2,6,8,5,4,3,5,1};
        mergeSort(array);
        System.out.println(Arrays.toString(array));      //按数组的方式打印
    }

}
