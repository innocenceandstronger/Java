class Node {
    int val;
    Node next;

    Node(int val, Node next) {
        this.val = val;
        this.next = next;
    }

    Node(int val) {
        this(val, null);
    }
}

public class Queue {
    private Node front = null;  // 链表的第一个结点
    private Node rear = null;   // 链表的最后一个结点
    private int size = 0;

    // 尾插
    public void push(int val) {
        Node node = new Node(val);
        if (front == null) {
            front = node;
        } else {
            rear.next = node;
        }

        rear = node;
        size++;
    }

    // 头删
    public void pop() {
        if (size <= 0) {
            System.out.println("队列为空");
            return;
        }

        front = front.next;
        if (front == null) {
            rear = null;
        }
        size--;
    }

    public int front() {  //返回当前的队首元素
        if (size <= 0) {
            System.out.println("队列为空");
            return -1;
        }

        return front.val;
    }

    public int rear() {//返回当前的队尾元素
        if (size <= 0) {
            System.out.println("队列为空");
            return -1;
        }

        return rear.val;
    }

    public int size() {//返回当前队列的元素个数
        return size;
    }

    public boolean isEmpty() {//判断队列是否为空
        return size == 0;
    }
}







