#include<stdio.h>
#include<stdlib.h>
int chess[14][13];  
int CanPath[14][13][8];  
typedef struct{                                            
int x,y;                  
}direction;
direction dir[8]={{2,1},{1,2},{-1,2},{-2,1},{-2,-1},{-1,-2},{1,-2},{2,-1}};  
typedef struct{
    int x,y;                                       
    int di;                                         
}pathnode;
typedef struct{
    pathnode pa[90];
    int top;
}path;                                            
void Init_Path(path *p)
{                                                 
    p->top=-1;
}
int Push_Path(path *p,pathnode t)
{                                                
    if(p->top>=89)
        return -1;
    else
    {
        p->top++;
        p->pa[p->top].x=t.x;
        p->pa[p->top].y=t.y;
        p->pa[p->top].di=t.di;
        return 1;
    }
}
int Empty_path(path p)
{                                               
    if(p.top<0) return 1;
    else return 0;                                   
}
int Pop_Path(path *p,pathnode *t)
{                                               
    if(Empty_path(*p))
        return -1;
    else
    {
        t->x=p->pa[p->top].x;
        t->y=p->pa[p->top].y;
        t->di=p->pa[p->top--].di;
        return 1;
    }
}

int Count(int x,int y)
{                                             
    int count=0,i=0;
    for(i=0;i<8;i++)
        if(chess[x+1+dir[i].x][y+1+dir[i].y]==0)     
            count++;
    return count;
}
int Find_Direction(int x,int y)
{                                      
    int dire,min=9,count,d=9;
for(dire=0;dire<8;dire++)
    {
        if(chess[x+1+dir[dire].x][y+1+dir[dire].y]==0 &&
            CanPath[x+1][y+1][dire]==0)
        {   count=Count(x+dir[dire].x,y+dir[dire].y);
            if(min>count)
            {min=count;
                d=dire;
            }
        }
    }if(d<9)
        return d;
    else
        return -1;
}
void Mark_Dir()
{                  
    int i,j,k;
    for(i=0;i<14;i++)
        for(j=0;j<13;j++)
            for(k=0;k<8;k++)
                CanPath[i][j][k]=0;         
}
void Mark_Che()
{                                     
int i,j;
    for(i=0;i<14;i++)                     
        for(j=0;j<13;j++)
            chess[i][j]=0;
    for(i=0;i<2;i++)                             
        for(j=0;j<13;j++)
            chess[i][j]=1;
    for(j=0;j<2;j++)                                      
        for(i=0;i<14;i++)
            chess[i][j]=1;
    for(j=11;j<13;j++)                        
        for(i=0;i<14;i++)
            chess[i][j]=1;
    for(i=12;i<14;i++)
        for(j=0;j<13;j++)                     
            chess[i][j]=1;
        }
void Horse(int x,int y)                           
{                                            
    int num=1,t,i;
    path p;
    pathnode f;
    Init_Path(&p);
    for(num=1;num<=90;num++)
    {
t=Find_Direction(x,y);
        if(t!=-1)
        {                                          
            chess[x+1][y+1]=num;
            f.x=x;
            f.y=y;
            f.di=t;
            Push_Path(&p,f);
            x=x+dir[t].x;
            y=y+dir[t].y;
        }
        else if(num==90 && chess[x+1][y+1]==0)
        {                                             
            chess[x+1][y+1]=num;
            f.x=x;
            f.y=y;
            f.di=t;
            Push_Path(&p,f);
        }

        else
        {
            if(Pop_Path(&p,&f)==-1)
            {                                             
                printf("无法为您找到一条适合的路径!\n");
                exit(0);
            }
            num-=2;                                     
            x=f.x;
            y=f.y;
            CanPath[x+1][y+1][f.di]=1;                 
        }                                                         
    }
                                               
    printf("马的遍历路径如下:\n  ");
    for(i=0;i<90;i++)
    {
        printf("(%2d,%2d)->",p.pa[i].x,p.pa[i].y);
        if((i+1)%(8)==0)                   
            printf("\b\b  \n->");         
    }
}
void main()
{                                           
    int x,y;
    char ch='y';
    printf("                   中国象棋马的遍历              \n");
    printf("\n");
    while(ch=='y')
    {  
    Mark_Che();
    Mark_Dir();
    while(1)
    {
        printf("请输入入口点横坐标(在1-10之间)：");
        scanf("%d",&x);
        if(x<1||x>10)
            printf("输入错误，请重新输入!(横坐标在1-10之间)\n");
        else
            break;
    }
    while(1)
    {
        printf("请输入入口点纵坐标(在1-9之间)：");
        scanf("%d",&y);
        if(y<1||y>9)
            printf("输入错误，请重新输入!(纵坐标在1-9之间)\n");
        else
            break;
    }
Horse(x,y);
    getchar();          
    printf("\n");
    printf("是否继续马的遍历(是：y;否：其他):");
    fflush(stdin);     
    scanf("%c",&ch);
    }
}
